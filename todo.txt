- /!\ DOCUMENTATION /!\

- Better error handling
  --> Print state of current VM thread on exception
  --> Think about raising exception on method/block objects instead of terminating process
  --> Implement Thread Local Storage
        --> current exception ptr

- a.#set:to --> a.set:to

- Track every objects for deallocation on exit

- Implement Arrays !!!

- nanbox_t Object_Clone(nanbox_t object)
- nanbox_t Object_Keys(nanbox_t object) <-- returns an ARRAY_OBJECT
- nanbox_t Object_SendMessage(nanbox_t object, nanbox_t message)
- nanbox_t Object_SendMessageWithArgs(nanbox_t object, nanbox_t message, nanbox_t args)

typedef struct {
    nanbox_t current_context;
    pid_t TID;
} thread_state_t;

typedef struct {
    pid_t TID;
    thread_state_t * thread_state;
} thread_list_t;

thread_state_t * ThreadState_New();
void             ThreadState_Free(thread_state_t * thread_state)
thread_state_t * ThreadState_Current();

typedef struct {
    thread_list_t * threads;
    nanbox_t objects_root;
} interpreter_state_t;

interpreter_state_t * InterpreterState_New();
void                  InterpreterState_Free(interpreter_state_t * interpreter_state);

Object:
    - Freeze the object (done)
    - Add/Remove a prototype (done)
    - Access fields (done)
    - Send a message to it

Message:
    myObject set: "hello" to: true
    myObject __send__: ((Message clone) setSelector: "set:to") withArgs: ["hello", true]
    ((Message clone) setSelector: "set:to") sendTo: myObject withArgs: ["hello", true]
