decl = IDENT COLEQUAL expr SEMICOLON

affect = dotted_expr EQUAL expr SEMICOLON

obj_field_init = IDENT COLON expr

msg_sel = IDENT [ COLON IDENT { IDENT COLON IDENT } ]

obj_msg_def = msg_sel LCBRACKET { statement } RCBRACKET

obj_litteral = LCBRACKET [ (obj_field_init | obj_msg_def) 
                           { COMMA (obj_field_init | obj_msg_def) } [ COMMA ] ] RCBRACKET

obj_field_name = IDENT
               | HASH IDENT { COLON IDENT }

array_litteral = LSBRACKET [ expr { COMMA expr } [ COMMA ] ] RSBRACKET

block_params = IDENT { IDENT } PIPE

block = LCBRACKET [ block_params ] statement { statement } RCBRACKET

litteral = obj_litteral
         | array_litteral
         | block
         | int_expr
         | double_expr
         | string_expr

array_access = LSBRACKET expr RSBRACKET

dotted_expr = IDENT { array_access } { DOT obj_field_name { array_access } }

msg_pass_expr = atom_expr IDENT [ COLON atom_expr { IDENT COLON atom_expr } ]

expr = or_expr

comp_op = EQEQUAL
        | NOTEQUAL
        | GEQUAL
        | LEQUAL
        | GREATER
        | LOWER

or_expr = and_expr { PIPEPIPE and_expr }

and_expr = comp_expr { AMPAMP comp_expr }

comp_expr = arith_expr [ comp_op arith_expr ]

arith_expr = term_expr { (PLUS | MINUS) term_expr }

term_expr = factor_expr { STAR factor_expr }

factor_expr = msg_pass_expr { SLASH msg_pass_expr }

unary_expr = EXCL atom_expr
           | MINUS atom_expr

atom_expr = dotted_expr
          | litteral
          | unary_expr
          | LPAREN expr RPAREN

statement = CIRCUMFLEX expr | mod_statement | expr

mod_statement = decl | affect | expr SEMICOLON
